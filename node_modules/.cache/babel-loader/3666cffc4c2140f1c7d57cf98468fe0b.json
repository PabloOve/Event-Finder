{"ast":null,"code":"var _jsxFileName = \"/home/pablo/GITHUB/Proyectos personales/my-app/src/app/components/NewEvent.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Box, Button, Card, CardContent, CircularProgress, Grid, Step, StepLabel, Stepper } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport { mixed, number, object } from 'yup';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst sleep = time => new Promise(acc => setTimeout(acc, time));\n\nexport default function NewEvent() {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(FormikStepper, {\n        initialValues: {\n          title: '',\n          description: '',\n          closedSpace: false,\n          concurrency: 0,\n          address: ''\n        },\n        onSubmit: async values => {\n          await sleep(3000);\n          console.log('values', values);\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormikStep, {\n          label: \"Event description\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              fullWidth: true,\n              name: \"title\",\n              component: TextField,\n              label: \"Event Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              fullWidth: true,\n              name: \"description\",\n              component: TextField,\n              label: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              name: \"closedSpace\",\n              type: \"checkbox\",\n              component: CheckboxWithLabel,\n              Label: {\n                label: 'Closed space'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormikStep, {\n          label: \"Event data\",\n          validationSchema: object({\n            concurrency: mixed().when('closedSpace', {\n              is: true,\n              then: number().required().max(50, 'there cannot be more than 50 in a closed space due to covid 19 restrictions'),\n              otherwise: number().required()\n            })\n          }),\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              fullWidth: true,\n              name: \"concurrency\",\n              type: \"number\",\n              component: TextField,\n              label: \"Concurrency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              fullWidth: true,\n              name: \"address\",\n              component: TextField,\n              label: \"Event Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 13\n  }, this);\n}\n_c = NewEvent;\nexport function FormikStep({\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}\n_c2 = FormikStep;\nexport function FormikStepper({\n  children,\n  ...props\n}) {\n  _s();\n\n  const childrenArray = React.Children.toArray(children);\n  const [step, setStep] = React.useState(0);\n  const currentChild = childrenArray[step];\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, { ...props,\n    validationSchema: currentChild.props.validationSchema,\n    onSubmit: async (values, helpers) => {\n      if (isLastStep()) {\n        await props.onSubmit(values, helpers);\n      } else {\n        setStep(s => s + 1);\n      }\n    },\n    children: ({\n      isSubmitting\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(Stepper, {\n        alternativeLabel: true,\n        activeStep: step,\n        children: childrenArray.map((child, index) => /*#__PURE__*/_jsxDEV(Step, {\n          completed: step > index,\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: child.props.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)\n        }, child.props.label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), currentChild, /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [step > 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            disabled: isSubmitting,\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => setStep(s => s - 1),\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this) : null, /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            startIcon: isSubmitting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: \"1rem\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 43\n            }, this) : null,\n            disabled: isSubmitting,\n            variant: \"contained\",\n            color: \"primary\",\n            type: \"submit\",\n            children: isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/events`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          children: \"Go back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormikStepper, \"5L63dQvunH1XgKOLcNNkxeDh1IM=\");\n\n_c3 = FormikStepper;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"NewEvent\");\n$RefreshReg$(_c2, \"FormikStep\");\n$RefreshReg$(_c3, \"FormikStepper\");","map":{"version":3,"sources":["/home/pablo/GITHUB/Proyectos personales/my-app/src/app/components/NewEvent.tsx"],"names":["React","Box","Button","Card","CardContent","CircularProgress","Grid","Step","StepLabel","Stepper","Field","Form","Formik","CheckboxWithLabel","TextField","mixed","number","object","Link","sleep","time","Promise","acc","setTimeout","NewEvent","title","description","closedSpace","concurrency","address","values","console","log","label","when","is","then","required","max","otherwise","FormikStep","children","FormikStepper","props","childrenArray","Children","toArray","step","setStep","useState","currentChild","isLastStep","length","validationSchema","helpers","onSubmit","s","isSubmitting","map","child","index"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Box, Button, Card, CardContent, CircularProgress, Grid, Step, StepLabel, Stepper} from '@material-ui/core'\nimport {Field, Form, Formik, FormikConfig, FormikValues} from 'formik'\nimport {CheckboxWithLabel, TextField} from 'formik-material-ui'\nimport {mixed, number, object} from 'yup';\nimport {Link} from 'react-router-dom';\n\nconst sleep = (time: number | undefined) => new Promise((acc) => setTimeout(acc, time));\n\nexport default function NewEvent() {\n    return(\n            <Card>\n                <CardContent>\n                    <FormikStepper\n                    initialValues={{\n                        title: '',\n                        description: '',\n                        closedSpace: false,\n                        concurrency:0,\n                        address: ''\n                    }}\n                    onSubmit={async (values) => {\n                        await sleep(3000);\n                        console.log('values', values);\n                      }}\n                    >\n\n                    <FormikStep label =\"Event description\">\n                    <Box paddingBottom={2}>\n                    <Field fullWidth\n                    name= \"title\" component={TextField} label=\"Event Title\"/>\n                    </Box>\n                    <Box paddingBottom={2}>\n                    <Field fullWidth\n                    name= \"description\" component={TextField} label=\"Description\"/>\n                    </Box>\n                    <Box paddingBottom={2}>\n                    <Field \n                    name= \"closedSpace\" type=\"checkbox\" component={CheckboxWithLabel} Label={{ label: 'Closed space'}}/>\n                    </Box>\n                    </FormikStep>\n\n                    <FormikStep label=\"Event data\"\n                                     validationSchema={object({\n                                        concurrency: mixed().when('closedSpace', {\n                                            is:true,\n                                            then: number().required().max(50, 'there cannot be more than 50 in a closed space due to covid 19 restrictions'),\n                                            otherwise: number().required()\n                                        })\n                                    })}\n                    >    \n                    <Box paddingBottom={2}>\n                    <Field fullWidth\n                    name= \"concurrency\" type=\"number\" component={TextField} label=\"Concurrency\"/>\n                    </Box>\n                    <Box paddingBottom={2}>\n                    <Field fullWidth\n                    name= \"address\" component={TextField} label=\"Event Address\"/>\n                    </Box>\n                    </FormikStep>\n\n                    </FormikStepper>\n                </CardContent>\n            </Card>\n    )\n}\n\nexport interface FormikStepProps extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'>{\n    label: string;\n}\n\nexport function FormikStep({children}: FormikStepProps){\n    return <>{children}</>\n}\n\nexport function FormikStepper({children, ...props}: FormikConfig<FormikValues>){\n    const childrenArray = React.Children.toArray(children) as React.ReactElement<FormikStepProps>[];\n    const [step, setStep] =  React.useState(0);\n    const currentChild = childrenArray[step] as React.ReactElement<FormikStepProps>;\n\n    function isLastStep(){\n        return step === childrenArray.length - 1;\n    }\n\n    return(\n        <Formik {...props}\n            validationSchema={currentChild.props.validationSchema}\n            onSubmit={async (values,helpers) => {\n                if(isLastStep()){\n                    await props.onSubmit(values, helpers);\n                }else{\n                    setStep(s => s+1)\n                }\n            }}\n        >\n              {({ isSubmitting }) => (\n        <Form autoComplete=\"off\">\n          <Stepper alternativeLabel activeStep={step}>\n            {childrenArray.map((child, index) => (\n              <Step key={child.props.label} completed={step > index}>\n                <StepLabel>{child.props.label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n                {currentChild}\n                <Grid container spacing={2}>\n                {step > 0 ? (\n              <Grid item>\n                <Button\n                  disabled={isSubmitting}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => setStep((s) => s - 1)}\n                >\n                  Back\n                </Button>\n              </Grid>\n            ) : null}\n                 \n                 <Grid item>\n                 <Button\n                startIcon={isSubmitting ? <CircularProgress size=\"1rem\" /> : null}\n                disabled={isSubmitting}\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                {isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'}\n              </Button>\n              </Grid>\n              </Grid>\n              <Link to={`/events`}>\n            <button className='btn btn-primary'>Go back</button>\n        </Link>\n            </Form>\n              )}\n        </Formik>\n    );\n}\n\n    "]},"metadata":{},"sourceType":"module"}