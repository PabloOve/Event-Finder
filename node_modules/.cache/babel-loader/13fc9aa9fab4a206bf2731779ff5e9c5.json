{"ast":null,"code":"var _jsxFileName = \"/home/pablo/GITHUB/Proyectos personales/my-app/src/app/components/NewEvent.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Box, Card, CardContent, Step, StepLabel, Stepper } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport { mixed, number, object } from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function NewEvent() {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(FormikStepper, {\n        onSubmit: () => {},\n        initialValues: {\n          title: '',\n          description: '',\n          closedSpace: false,\n          concurrency: 0,\n          address: ''\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormikStep, {\n          label: \"Event description\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              fullWidth: true,\n              name: \"title\",\n              component: TextField,\n              label: \"Event Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              fullWidth: true,\n              name: \"description\",\n              component: TextField,\n              label: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              name: \"closedSpace\",\n              type: \"checkbox\",\n              component: CheckboxWithLabel,\n              label: {\n                label: \"does the event take place in a closed space?\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormikStep, {\n          label: \"Event data\",\n          validationSchema: object({\n            concurrency: mixed().when('closedSpace', {\n              is: true,\n              then: number().required().max(50, 'there cannot be more than 50 in a closed space due to covid 19 restrictions'),\n              otherwise: number().required()\n            })\n          }),\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              fullWidth: true,\n              name: \"concurrency\",\n              type: \"number\",\n              component: TextField,\n              label: \"Concurrency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            paddingBottom: 2,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              fullWidth: true,\n              name: \"address\",\n              component: TextField,\n              label: \"Event Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 13\n  }, this);\n}\n_c = NewEvent;\nexport function FormikStep({\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}\n_c2 = FormikStep;\nexport function FormikStepper({\n  children,\n  ...props\n}) {\n  _s();\n\n  const childrenArray = React.Children.toArray(children);\n  const [step, setStep] = React.useState(0);\n  const currentChild = childrenArray[step];\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, { ...props,\n    validationSchema: currentChild.props.validationSchema,\n    onSubmit: async (values, helpers) => {\n      if (isLastStep()) {\n        await props.onSubmit(values, helpers);\n      } else {\n        setStep(s => s + 1);\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(Stepper, {\n        activeStep: step,\n        alternativeLabel: true,\n        children: childrenArray.map(child => /*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: child.props.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 7\n          }, this)\n        }, child.props.label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), currentChild, step > 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-light\",\n        onClick: () => setStep(s => s - 1),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-light\",\n        children: isLastStep() ? 'Submit' : 'Next'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormikStepper, \"5L63dQvunH1XgKOLcNNkxeDh1IM=\");\n\n_c3 = FormikStepper;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"NewEvent\");\n$RefreshReg$(_c2, \"FormikStep\");\n$RefreshReg$(_c3, \"FormikStepper\");","map":{"version":3,"sources":["/home/pablo/GITHUB/Proyectos personales/my-app/src/app/components/NewEvent.tsx"],"names":["React","Box","Card","CardContent","Step","StepLabel","Stepper","Field","Form","Formik","CheckboxWithLabel","TextField","mixed","number","object","NewEvent","title","description","closedSpace","concurrency","address","label","when","is","then","required","max","otherwise","FormikStep","children","FormikStepper","props","childrenArray","Children","toArray","step","setStep","useState","currentChild","isLastStep","length","validationSchema","values","helpers","onSubmit","s","map","child"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Box, Button, Card, CardContent, CircularProgress, Grid, Step, StepLabel, Stepper} from '@material-ui/core'\nimport {Field, Form, Formik, FormikConfig, FormikValues} from 'formik'\nimport {CheckboxWithLabel, TextField} from 'formik-material-ui'\nimport {mixed, number, object} from 'yup';\n\nexport default function NewEvent() {\n    return(\n            <Card>\n                <CardContent>\n                    <FormikStepper\n   \n                    onSubmit={()=>{}}\n                    initialValues={{\n                        title: '',\n                        description: '',\n                        closedSpace: false,\n                        concurrency:0,\n                        address: ''\n                    }}\n                    >\n\n                    <FormikStep label =\"Event description\">\n                    <Box paddingBottom={2}>\n                    <Field fullWidth\n                    name= \"title\" component={TextField} label=\"Event Title\"/>\n                    </Box>\n                    <Box paddingBottom={2}>\n                    <Field fullWidth\n                    name= \"description\" component={TextField} label=\"Description\"/>\n                    </Box>\n                    <Box paddingBottom={2}>\n                    <Field \n                    name= \"closedSpace\" type=\"checkbox\" component={CheckboxWithLabel} label={{label: \"does the event take place in a closed space?\"}}/>\n                    </Box>\n                    </FormikStep>\n\n                    <FormikStep label=\"Event data\"\n                                     validationSchema={object({\n                                        concurrency: mixed().when('closedSpace', {\n                                            is:true,\n                                            then: number().required().max(50, 'there cannot be more than 50 in a closed space due to covid 19 restrictions'),\n                                            otherwise: number().required()\n                                        })\n                                    })}\n                    >    \n                    <Box paddingBottom={2}>\n                    <Field fullWidth\n                    name= \"concurrency\" type=\"number\" component={TextField} label=\"Concurrency\"/>\n                    </Box>\n                    <Box paddingBottom={2}>\n                    <Field fullWidth\n                    name= \"address\" component={TextField} label=\"Event Address\"/>\n                    </Box>\n                    </FormikStep>\n\n                    </FormikStepper>\n                </CardContent>\n            </Card>\n    )\n}\n\nexport interface FormikStepProps extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'>{\n    label: string;\n}\n\nexport function FormikStep({children}: FormikStepProps){\n    return <>{children}</>\n}\n\nexport function FormikStepper({children, ...props}: FormikConfig<FormikValues>){\n    const childrenArray = React.Children.toArray(children) as React.ReactElement<FormikStepProps>[];\n    const [step, setStep] =  React.useState(0);\n    const currentChild = childrenArray[step] as React.ReactElement<FormikStepProps>;\n\n    function isLastStep(){\n        return step === childrenArray.length - 1;\n    }\n\n    return(\n        <Formik {...props}\n            validationSchema={currentChild.props.validationSchema}\n            onSubmit={async (values,helpers) => {\n                if(isLastStep()){\n                    await props.onSubmit(values, helpers)\n                }else{\n                    setStep(s => s+1)\n                }\n            }}\n        >\n            <Form autoComplete=\"off\">\n            <Stepper activeStep={step} alternativeLabel>\n  {childrenArray.map((child) => (\n    <Step key={child.props.label}>\n      <StepLabel>{child.props.label}</StepLabel>\n    </Step>\n  ))}\n</Stepper>\n                {currentChild}\n                {step > 0 ? <button type=\"button\" className=\"btn btn-light\" onClick={() => setStep(s => s-1)}>Back</button> : null}\n                <button type=\"submit\" className=\"btn btn-light\">{isLastStep() ? 'Submit' : 'Next'}</button> \n            </Form>\n        </Formik>\n    );\n}\n\n    "]},"metadata":{},"sourceType":"module"}