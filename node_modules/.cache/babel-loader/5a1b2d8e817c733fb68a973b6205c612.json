{"ast":null,"code":"var _jsxFileName = \"/home/pablo/GITHUB/Proyectos personales/my-app/src/app/components/NewEvent.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Card, CardContent } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport { mixed, number, object } from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function NewEvent() {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(FormikStepper, {\n        onSubmit: () => {},\n        initialValues: {\n          title: '',\n          description: '',\n          closedSpace: false,\n          concurrency: 0,\n          address: ''\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormikStep, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            name: \"title\",\n            component: TextField,\n            label: \"Event Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"description\",\n            component: TextField,\n            label: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"closedSpace\",\n            type: \"checkbox\",\n            component: CheckboxWithLabel,\n            label: {\n              label: \"does the event take place in a closed space?\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormikStep, {\n          validationSchema: object({\n            concurrency: mixed().when('closedSpace', {\n              is: true,\n              then: number().required().max(50, 'there cannot be more than 50 in a closed space due to covid 19 restrictions'),\n              otherwise: number().required()\n            })\n          }),\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            name: \"concurrency\",\n            type: \"number\",\n            component: TextField,\n            label: \"Concurrency\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"address\",\n            component: TextField,\n            label: \"Event Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 13\n  }, this);\n}\n_c = NewEvent;\nexport function FormikStep({\n  children,\n  ...props\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}\n_c2 = FormikStep;\nexport function FormikStepper({\n  children,\n  ...props\n}) {\n  _s();\n\n  const childrenArray = React.Children.toArray(children);\n  const [step, setStep] = React.useState(0);\n  const currentChild = childrenArray[step];\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, { ...props,\n    onSubmit: async (values, helpers) => {\n      if (isLastStep()) {\n        await props.onSubmit(values, helpers);\n      } else {\n        setStep(s => s + 1);\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      children: [currentChild, step > 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-light\",\n        onClick: () => setStep(s => s - 1),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-light\",\n        children: isLastStep() ? 'Submit' : 'Next'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormikStepper, \"5L63dQvunH1XgKOLcNNkxeDh1IM=\");\n\n_c3 = FormikStepper;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"NewEvent\");\n$RefreshReg$(_c2, \"FormikStep\");\n$RefreshReg$(_c3, \"FormikStepper\");","map":{"version":3,"sources":["/home/pablo/GITHUB/Proyectos personales/my-app/src/app/components/NewEvent.tsx"],"names":["React","Card","CardContent","Field","Form","Formik","CheckboxWithLabel","TextField","mixed","number","object","NewEvent","title","description","closedSpace","concurrency","address","label","when","is","then","required","max","otherwise","FormikStep","children","props","FormikStepper","childrenArray","Children","toArray","step","setStep","useState","currentChild","isLastStep","length","values","helpers","onSubmit","s"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Card, CardContent} from '@material-ui/core'\nimport {Field, Form, Formik, FormikConfig, FormikValues} from 'formik'\nimport {CheckboxWithLabel, TextField} from 'formik-material-ui'\nimport {mixed, number, object} from 'yup';\n\nexport default function NewEvent() {\n    return(\n            <Card>\n                <CardContent>\n                    <FormikStepper\n   \n                    onSubmit={()=>{}}\n                    initialValues={{\n                        title: '',\n                        description: '',\n                        closedSpace: false,\n                        concurrency:0,\n                        address: ''\n                    }}\n                    >\n\n                    <FormikStep>\n                    <Field name= \"title\" component={TextField} label=\"Event Title\"/>\n                    <Field name= \"description\" component={TextField} label=\"Description\"/>\n                    <Field name= \"closedSpace\" type=\"checkbox\" component={CheckboxWithLabel} label={{label: \"does the event take place in a closed space?\"}}/>\n                    </FormikStep>\n\n                    <FormikStep\n                                     validationSchema={object({\n                                        concurrency: mixed().when('closedSpace', {\n                                            is:true,\n                                            then: number().required().max(50, 'there cannot be more than 50 in a closed space due to covid 19 restrictions'),\n                                            otherwise: number().required()\n                                        })\n                                    })}\n                    >\n                    <Field name= \"concurrency\" type=\"number\" component={TextField} label=\"Concurrency\"/>\n                    <Field name= \"address\" component={TextField} label=\"Event Address\"/>\n                    </FormikStep>\n\n                    </FormikStepper>\n                </CardContent>\n            </Card>\n    )\n}\n\nexport interface FormikStepProps extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'>{\n    \n}\n\nexport function FormikStep({children, ...props}: FormikStepProps){\n    return <>{children}</>\n}\n\nexport function FormikStepper({children, ...props}: FormikConfig<FormikValues>){\n    const childrenArray = React.Children.toArray(children) as React.ElementType<FormikStepProps>[];\n    const [step, setStep] =  React.useState(0);\n    const currentChild = childrenArray[step]\n\n    function isLastStep(){\n        return step === childrenArray.length - 1;\n    }\n\n    return(\n        <Formik {...props}\n            onSubmit={async (values,helpers) => {\n                if(isLastStep()){\n                    await props.onSubmit(values, helpers)\n                }else{\n                    setStep(s => s+1)\n                }\n            }}\n        >\n            <Form autoComplete=\"off\">\n                {currentChild}\n                {step > 0 ? <button type=\"button\" className=\"btn btn-light\" onClick={() => setStep(s => s-1)}>Back</button> : null}\n                <button type=\"submit\" className=\"btn btn-light\">{isLastStep() ? 'Submit' : 'Next'}</button> \n            </Form>\n        </Formik>\n    );\n}\n\n    "]},"metadata":{},"sourceType":"module"}